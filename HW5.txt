import math
import scipy.stats as stats
from math import comb
from sympy import symbols, Eq, solve


# Problem 1: Second Moment for Uniform Distribution
def second_moment_uniform(a, b):
    # Calculate the second moment
    second_moment = sum(x**2 for x in range(a, b + 1)) / (b - a + 1)
    return round(second_moment, 2)

# Problem 2: First Moment from Second Moment and Support
def first_moment_from_second(second_moment, support):
    # Number of elements in support
    n = len(support)
    
    # Define 't' as a symbol for symbolic computation
    t = symbols('t')
    
    # Calculate second moment using symbolic t
    second_moment_calculated = sum(x**2 if x != 't' else t**2 for x in support) / n
    
    # Solve for t using the provided second moment value
    equation = Eq(second_moment_calculated, second_moment)
    t_solution = solve(equation, t)
    
    # Replace 't' with its solved value in the support
    support_with_t = [t_solution[0] if x == 't' else x for x in support]
    
    # Calculate the first moment using the solved value of 't'
    first_moment = sum(support_with_t) / n
    return round(first_moment, 2)

# Problem 3: Binomial Probability (e.g., P(X=10) for a given n and p)
def binomial_probability(n, p, k):
    return round(comb(n, k) * (p ** k) * ((1 - p) ** (n - k)), 3)

# Problem 4: Standard Deviation for a Discrete Random Variable
def standard_deviation(values, probabilities):
    mean = sum(p * x for p, x in zip(probabilities, values))
    variance = sum(p * (x - mean) ** 2 for p, x in zip(probabilities, values))
    std_dev = math.sqrt(variance)
    return round(std_dev, 3)

# Problem 5: Index of Skewness for a Discrete Random Variable
def index_of_skewness(values, probabilities):
    mean = sum(p * x for p, x in zip(probabilities, values))
    variance = sum(p * (x - mean) ** 2 for p, x in zip(probabilities, values))
    std_dev = math.sqrt(variance)
    
    # Third central moment
    third_moment = sum(p * (x - mean) ** 3 for p, x in zip(probabilities, values))
    skewness = third_moment / (std_dev ** 3)
    
    return round(skewness, 3)

# Problem 6: Variance of X using the moment generating function
def variance_from_mgf(mean_coeff, divisor):
    # Mean (first derivative of MGF at t = 0)
    mean = mean_coeff / divisor
    # Second moment (from the second derivative of M(t) at t = 0)
    second_moment = (mean_coeff * (mean_coeff + 1)) / (divisor ** 2)
    # Variance = E(X^2) - (E(X))^2
    variance = second_moment - (mean ** 2)
    return round(variance, 2)

# Problem 7: Binomial probability of exactly k successes
def binomial_probability_exactly_k(n, p, k):
    return round(comb(n, k) * (p ** k) * ((1 - p) ** (n - k)), 3)

# Problem 8: Cumulative binomial probability (P(X <= k_max))
def cumulative_binomial_probability(n, p, k_max):
    prob = sum(binomial_probability_exactly_k(n, p, k) for k in range(k_max + 1))
    return round(prob, 3)

# Problem 9: Second Moment of a Binomial Variable
def binomial_second_moment(n, p):
    # E(X^2) = np(1 + (n-1)p)
    return round(n * p * (1 + (n - 1) * p), 2)

# Problem 10: Minimum Lottery Tickets for 41% Chance
def find_minimum_tickets(prob_win, target_prob):
    n = 1
    while 1 - (1 - prob_win) ** n < target_prob:
        n += 1
    return n

# Example use cases
if __name__ == "__main__":
    #problem1 #Correct!
    a, b = 1, 127
    second_moment = second_moment_uniform(a, b)
    print("Second moment:", second_moment)

    # Problem 2: First moment from second #Correct! (always -1)
    support = ['t', 0, 4, 10]  # Support set including t
    second_moment = 45  # Given second moment
    first_moment = first_moment_from_second(second_moment, support)
    print("First moment:", first_moment)

    # Problem 3: Binomial probability (e.g., P(X=10) with n=12, p=0.7)
    print("true, false, false, true, true, false") #SEE CORRECT ANS

    # Problem 4 example usage correct
    values_std = [4, 10, 13]
    probabilities_std = [0.03, 0.02, 0.95]
    std_dev = standard_deviation(values_std, probabilities_std)
    print(f"Standard Deviation: {std_dev}")

    # Problem 5 example usage correct
    values_skew = [-19, -13, 4]
    probabilities_skew = [0.27, 0.40, 0.33]
    skewness = index_of_skewness(values_skew, probabilities_skew)
    print(f"Index of Skewness: {skewness}")

    # Problem 6: Variance of X from MGF with new values
    mean_coeff = 36  # Given in the problem (enter the value not negative)
    divisor = 6      # Given in the problem
    variance_result = variance_from_mgf(mean_coeff, divisor)
    print("Variance of X:", variance_result)

    # Problem 7: Binomial probability for exactly 10 successes
    n = 14
    p = 0.70
    people = 9
    prob_7_result = binomial_probability_exactly_k(n, p, people)
    print("Probability of exactly 10 successes:", prob_7_result)

    # Problem 8: Cumulative binomial probability (P(X <= 8))
    n = 12
    p = 0.54
    k_max = 8
    prob_8_result = cumulative_binomial_probability(n, p, k_max)
    print("Cumulative Probability for at most 8 successes:", prob_8_result)

    # Problem 9: Second moment for binomial random variable #correct
    n_bin = 221
    p_bin = 0.14
    second_moment_result = binomial_second_moment(n_bin, p_bin)
    print(f"Second Moment: {second_moment_result}") 

    # Problem 10: Minimum tickets for at least one win # correct
    prob_win_lottery = 0.05
    target_prob_lottery = 0.50
    min_lottery_tickets = find_minimum_tickets(prob_win_lottery, target_prob_lottery)
    print(f"Minimum number of tickets: {min_lottery_tickets}") 
